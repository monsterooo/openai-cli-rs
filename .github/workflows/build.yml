# name: build

# on:
#   release:
#     types: [created]
# permissions:
#   contents: write

# jobs:
#   build-rust:
#     name: release ${{ matrix.target }}
#     runs-on: ubuntu-latest
#     strategy:
#       fail-fast: false
#       matrix:
#         include:
#           - target: x86_64-pc-windows-gnu
#             archive: zip
#           - target: x86_64-unknown-linux-musl
#             archive: tar.gz tar.xz tar.zst
#           - target: x86_64-apple-darwin
#             archive: zip
#     steps:
#       - uses: actions/checkout@v4
#         with:
#           fetch-depth: 0
#           submodules: recursive
#       - name: Install Rust
#         run: rustup toolchain install stable --component llvm-tools-preview
#       - name: Install cargo-llvm-cov
#         uses: taiki-e/install-action@cargo-llvm-cov
#       - uses: Swatinem/rust-cache@v2
#       - name: Generate a changelog
#         uses: orhun/git-cliff-action@v2
#         id: git-cliff
#         if: startsWith(github.ref, 'refs/tags/')
#         with:
#           config: cliff.toml
#           args: -vv --latest --strip header
#         env:
#           OUTPUT: CHANGES.md
#       - name: Upload artifact
#         uses: actions/upload-artifact@v3
#         with:
#           name: Binary
#           path: |
#             ${{ steps.compile.outputs.BUILT_ARCHIVE }}
#             ${{ steps.compile.outputs.BUILT_CHECKSUM }}

# 下面是一个基础的工作流，你可以基于它来编写自己的 GitHub Actions
name: Build

permissions:
  contents: write

on:
  release:
    types: [created]

  # 允许用于在 `Actions` 标签页中手动运行工作流
  workflow_dispatch:

# 工作流由一个或多个作业( job )组成，这些作业可以顺序运行也可以并行运行
# jobs:
#   release:
#     name: release ${{ matrix.target }}
#     runs-on: ubuntu-latest
#     strategy:
#       fail-fast: false
#       matrix:
#         include:
#           - target: x86_64-pc-windows-gnu
#             archive: zip
#           - target: x86_64-unknown-linux-musl
#             archive: tar.gz tar.xz tar.zst
#           - target: x86_64-apple-darwin
#             archive: zip
#     steps:
#       - uses: actions/checkout@master
#       - name: Install Rust
#         run: rustup toolchain install stable --component llvm-tools-preview
#       - name: Install cargo-llvm-cov
#         uses: taiki-e/install-action@cargo-llvm-cov
#       - uses: Swatinem/rust-cache@v2
#       - name: Generate a changelog
#         uses: orhun/git-cliff-action@v2
#         id: git-cliff
#         if: startsWith(github.ref, 'refs/tags/')
#         with:
#           config: cliff.toml
#           args: -vv --latest --strip header
#         env:
#           OUTPUT: CHANGES.md
#       - name: Compile and release
#         uses: rust-build/rust-build.action@v1.4.5
#         env:
#           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#         with:
#           RUSTTARGET: ${{ matrix.target }}
#           ARCHIVE_TYPES: ${{ matrix.archive }}
#       - name: Upload artifact
#         uses: actions/upload-artifact@v3
#         with:
#           name: Binary
#           path: |
#             ${{ steps.compile.outputs.BUILT_ARCHIVE }}
#             ${{ steps.compile.outputs.BUILT_CHECKSUM }}

jobs:
  release:
    name: Release - ${{ matrix.platform.os_name }}
    if: startsWith( github.ref, 'refs/tags/v' ) || github.ref == 'refs/tags/test-release'
    strategy:
      matrix:
        platform:
          - os_name: FreeBSD-x86_64
            os: ubuntu-20.04
            target: x86_64-unknown-freebsd
            bin: ubi
            name: ubi-FreeBSD-x86_64.tar.gz
            cross: true
            cargo_command: ./cross

          - os_name: Linux-x86_64
            os: ubuntu-20.04
            target: x86_64-unknown-linux-musl
            bin: ubi
            name: ubi-Linux-x86_64-musl.tar.gz
            cross: false
            cargo_command: cargo

          - os_name: Windows-aarch64
            os: windows-latest
            target: aarch64-pc-windows-msvc
            bin: ubi.exe
            name: ubi-Windows-aarch64.zip
            cross: false
            cargo_command: cargo

          - os_name: macOS-x86_64
            os: macOS-latest
            target: x86_64-apple-darwin
            bin: ubi
            name: ubi-Darwin-x86_64.tar.gz
            cross: false
            cargo_command: cargo

    runs-on: ${{ matrix.platform.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Install toolchain if not cross-compiling
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.platform.target }}
        if: ${{ !matrix.platform.cross }}
      - name: Install musl-tools on Linux
        run: sudo apt-get update --yes && sudo apt-get install --yes musl-tools
        if: contains(matrix.platform.os, 'ubuntu') && !matrix.platform.cross
      - name: Install cross if cross-compiling (*nix)
        id: cross-nix
        shell: bash
        run: |
          set -e
          export TARGET="$HOME/bin"
          mkdir -p "$TARGET"
          ./bootstrap/bootstrap-ubi.sh
          "$HOME/bin/ubi" --project cross-rs/cross --matching musl --in .
        if: matrix.platform.cross && !contains(matrix.platform.os, 'windows')
      - name: Install cross if cross-compiling (Windows)
        id: cross-windows
        shell: powershell
        run: |
          .\bootstrap\bootstrap-ubi.ps1
          .\ubi --project cross-rs/cross --in .
        if: matrix.platform.cross && contains(matrix.platform.os, 'windows')
      - name: Build binary (*nix)
        shell: bash
        run: |
          ${{ matrix.platform.cargo_command }} build --locked --release --target ${{ matrix.platform.target }}
        if: ${{ !contains(matrix.platform.os, 'windows') }}
      - name: Build binary (Windows)
        # We have to use the platform's native shell. If we use bash on
        # Windows then OpenSSL complains that the Perl it finds doesn't use
        # the platform's native paths and refuses to build.
        shell: powershell
        run: |
          & ${{ matrix.platform.cargo_command }} build --locked --release --target ${{ matrix.platform.target }}
        if: contains(matrix.platform.os, 'windows')
      - name: Strip binary
        shell: bash
        run: |
          strip target/${{ matrix.platform.target }}/release/${{ matrix.platform.bin }}
        # strip doesn't work with cross-arch binaries on Linux or Windows.
        if: ${{ !(matrix.platform.cross || matrix.platform.target == 'aarch64-pc-windows-msvc') }}
      - name: Package as archive
        shell: bash
        run: |
          cd target/${{ matrix.platform.target }}/release
          if [[ "${{ matrix.platform.os }}" == "windows-latest" ]]; then
            7z a ../../../${{ matrix.platform.name }} ${{ matrix.platform.bin }}
          else
            tar czvf ../../../${{ matrix.platform.name }} ${{ matrix.platform.bin }}
          fi
          cd -
      - name: Publish release artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ubi-${{ matrix.platform.os_name }}
          path: "ubi*"
