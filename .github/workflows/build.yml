# name: build

# on:
#   release:
#     types: [created]
# permissions:
#   contents: write

# jobs:
#   build-rust:
#     name: release ${{ matrix.target }}
#     runs-on: ubuntu-latest
#     strategy:
#       fail-fast: false
#       matrix:
#         include:
#           - target: x86_64-pc-windows-gnu
#             archive: zip
#           - target: x86_64-unknown-linux-musl
#             archive: tar.gz tar.xz tar.zst
#           - target: x86_64-apple-darwin
#             archive: zip
#     steps:
#       - uses: actions/checkout@v4
#         with:
#           fetch-depth: 0
#           submodules: recursive
#       - name: Install Rust
#         run: rustup toolchain install stable --component llvm-tools-preview
#       - name: Install cargo-llvm-cov
#         uses: taiki-e/install-action@cargo-llvm-cov
#       - uses: Swatinem/rust-cache@v2
#       - name: Generate a changelog
#         uses: orhun/git-cliff-action@v2
#         id: git-cliff
#         if: startsWith(github.ref, 'refs/tags/')
#         with:
#           config: cliff.toml
#           args: -vv --latest --strip header
#         env:
#           OUTPUT: CHANGES.md
#       - name: Upload artifact
#         uses: actions/upload-artifact@v3
#         with:
#           name: Binary
#           path: |
#             ${{ steps.compile.outputs.BUILT_ARCHIVE }}
#             ${{ steps.compile.outputs.BUILT_CHECKSUM }}



# # 下面是一个基础的工作流，你可以基于它来编写自己的 GitHub Actions
# name: Build

# on:
#   push:
#     tags:
#       - v*

#   # 允许用于在 `Actions` 标签页中手动运行工作流
#   workflow_dispatch:

# # 工作流由一个或多个作业( job )组成，这些作业可以顺序运行也可以并行运行
# jobs:
#   release:
#     name: release ${{ matrix.target }}
#     runs-on: ubuntu-latest
#     strategy:
#       fail-fast: false
#       matrix:
#         include:
#           - target: x86_64-pc-windows-gnu
#             archive: zip
#           - target: x86_64-unknown-linux-musl
#             archive: tar.gz tar.xz tar.zst
#           - target: x86_64-apple-darwin
#             archive: zip
#     steps:
#       - uses: actions/checkout@master
#       - name: Install Rust
#         run: rustup toolchain install stable --component llvm-tools-preview
#       - name: Install cargo-llvm-cov
#         uses: taiki-e/install-action@cargo-llvm-cov
#       - uses: Swatinem/rust-cache@v2
#       - name: Generate a changelog
#         uses: orhun/git-cliff-action@v2
#         id: git-cliff
#         if: startsWith(github.ref, 'refs/tags/')
#         with:
#           config: cliff.toml
#           args: -vv --latest --strip header
#         env:
#           OUTPUT: CHANGES.md
#       - name: Compile and release
#         uses: rust-build/rust-build.action@v1.4.5
#         env:
#           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#         with:
#           RUSTTARGET: ${{ matrix.target }}
#           ARCHIVE_TYPES: ${{ matrix.archive }}
#       - name: Upload artifact
#         uses: actions/upload-artifact@v3
#         with:
#           name: Binary
#           path: |
#             ${{ steps.compile.outputs.BUILT_ARCHIVE }}
#             ${{ steps.compile.outputs.BUILT_CHECKSUM }}


# name: Deploy

# on:
#   push:
#     tags:
#       - v*

# permissions:
#   contents: write

# jobs:
#   build-and-upload:
#     name: Build and upload
#     runs-on: ${{ matrix.os }}

#     strategy:
#       matrix:
#         # You can add more, for any target you'd like!
#         include:
#           - build: linux
#             os: ubuntu-latest
#             target: x86_64-unknown-linux-musl

#           - build: macos
#             os: macos-latest
#             target: x86_64-apple-darwin

#           - build: windows-gnu
#             os: windows-latest
#             target: x86_64-pc-windows-gnu

#     steps:
#       - name: Checkout
#         uses: actions/checkout@v3

#       - name: Get the release version from the tag
#         shell: bash
#         run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV

#       - name: Install Rust
#         # Or @nightly if you want
#         uses: dtolnay/rust-toolchain@stable
#         # Arguments to pass in
#         with:
#           # Make Rust compile to our target (defined in the matrix)
#           targets: ${{ matrix.target }}

#       - name: Build
#         uses: actions-rs/cargo@v1
#         with:
#           use-cross: true
#           command: build
#           args: --verbose --release --target ${{ matrix.target }}

#       - name: Build archive
#         shell: bash
#         run: |
#           # Replace with the name of your binary
#           binary_name="openai-cli-rs"

#           dirname="$binary_name-${{ env.VERSION }}-${{ matrix.target }}"
#           mkdir "$dirname"
#           if [ "${{ matrix.os }}" = "windows-latest" ]; then
#             mv "target/${{ matrix.target }}/release/$binary_name.exe" "$dirname"
#           else
#             mv "target/${{ matrix.target }}/release/$binary_name" "$dirname"
#           fi

#           if [ "${{ matrix.os }}" = "windows-latest" ]; then
#             7z a "$dirname.zip" "$dirname"
#             echo "ASSET=$dirname.zip" >> $GITHUB_ENV
#           else
#             tar -czf "$dirname.tar.gz" "$dirname"
#             echo "ASSET=$dirname.tar.gz" >> $GITHUB_ENV
#           fi

#       - name: Release
#         uses: softprops/action-gh-release@v1
#         with:
#           files: |
#             ${{ env.ASSET }}


name: Publish

on:
  push:
    tags:
      - "*"

jobs:
  publish:
    name: Publish for ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            artifact_name: openai-cli-rs
            asset_name: openai-cli-rs-linux-amd64
          - os: macos-latest
            artifact_name: openai-cli-rs
            asset_name: openai-cli-rs-macos-amd64
          - os: windows-latest
            artifact_name: openai-cli-rs.exe
            asset_name: openai-cli-rs-windows-amd64.exe

    steps:
      - uses: actions/checkout@v2

      - name: Build
        shell: bash
        run: |
          cargo build --release --locked

      - name: Build archive
        shell: bash
        run: |
          staging="${{matrix.asset_name}}-src"
          mkdir -p "$staging"

          cp {README.md} "$staging/"
          cp {Cargo.toml,Cargo.lock} "$staging/"
          cp -R ./src "./$staging/src"

          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            7z a "${staging}.zip" "$staging"
            echo "ASSET=${staging}.zip" >> $GITHUB_ENV
          else
            tar czf "${staging}.tar.gz" "${staging}"
            echo "ASSET=${staging}.tar.gz" >> $GITHUB_ENV
          fi

      - name: Create deb artifact
        shell: bash
        run: |
          if [ "${{ matrix.os }}" = "ubuntu-latest" ]; then
            cd ..
            cargo install --locked cargo-deb
            cd -
            asset_path="${{ matrix.asset_name }}.deb"
            cargo deb --output ./"${asset_path}"
            echo "DEB=${asset_path}" >> $GITHUB_ENV
          fi

      - name: Upload deb package
        uses: svenstaro/upload-release-action@v2
        if: matrix.os == 'ubuntu-latest'
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ${{ env.DEB }}
          asset_name: ${{ env.DEB }}
          tag: ${{ github.ref }}

      - name: Upload src to release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ${{ env.ASSET }}
          asset_name: ${{ env.ASSET }}
          tag: ${{ github.ref }}

      - name: Upload binaries to release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: target/release/${{ matrix.artifact_name }}
          asset_name: ${{ matrix.asset_name }}
          tag: ${{ github.ref }}
